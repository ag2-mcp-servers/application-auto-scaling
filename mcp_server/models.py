# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:39:29+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class AdjustmentType(Enum):
    ChangeInCapacity = 'ChangeInCapacity'
    PercentChangeInCapacity = 'PercentChangeInCapacity'
    ExactCapacity = 'ExactCapacity'


class AmazonResourceName(
    RootModel[
        constr(
            pattern=r'^arn:.+:application-autoscaling:.+:[0-9]+:scalable-target\/[a-zA-Z0-9-]+$',
            min_length=1,
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'^arn:.+:application-autoscaling:.+:[0-9]+:scalable-target\/[a-zA-Z0-9-]+$',
        min_length=1,
        max_length=1011,
    )


class ConcurrentUpdateException(RootModel[Any]):
    root: Any


class Cooldown(RootModel[int]):
    root: int


class DeleteScalingPolicyResponse(BaseModel):
    pass


class DeleteScheduledActionResponse(BaseModel):
    pass


class DeregisterScalableTargetResponse(BaseModel):
    pass


class DisableScaleIn(RootModel[bool]):
    root: bool


class Expression(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class FailedResourceAccessException(RootModel[Any]):
    root: Any


class Id(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class IncludeNotScaledActivities(RootModel[bool]):
    root: bool


class InternalServiceException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class MaxResults(RootModel[int]):
    root: int


class MetricAggregationType(Enum):
    Average = 'Average'
    Minimum = 'Minimum'
    Maximum = 'Maximum'


class MetricDimensionName(RootModel[str]):
    root: str


class MetricDimensionValue(RootModel[str]):
    root: str


class MetricName(RootModel[str]):
    root: str


class MetricNamespace(RootModel[str]):
    root: str


class MetricScale(RootModel[float]):
    root: float


class MetricStatistic(Enum):
    Average = 'Average'
    Minimum = 'Minimum'
    Maximum = 'Maximum'
    SampleCount = 'SampleCount'
    Sum = 'Sum'


class MetricType(Enum):
    DynamoDBReadCapacityUtilization = 'DynamoDBReadCapacityUtilization'
    DynamoDBWriteCapacityUtilization = 'DynamoDBWriteCapacityUtilization'
    ALBRequestCountPerTarget = 'ALBRequestCountPerTarget'
    RDSReaderAverageCPUUtilization = 'RDSReaderAverageCPUUtilization'
    RDSReaderAverageDatabaseConnections = 'RDSReaderAverageDatabaseConnections'
    EC2SpotFleetRequestAverageCPUUtilization = (
        'EC2SpotFleetRequestAverageCPUUtilization'
    )
    EC2SpotFleetRequestAverageNetworkIn = 'EC2SpotFleetRequestAverageNetworkIn'
    EC2SpotFleetRequestAverageNetworkOut = 'EC2SpotFleetRequestAverageNetworkOut'
    SageMakerVariantInvocationsPerInstance = 'SageMakerVariantInvocationsPerInstance'
    ECSServiceAverageCPUUtilization = 'ECSServiceAverageCPUUtilization'
    ECSServiceAverageMemoryUtilization = 'ECSServiceAverageMemoryUtilization'
    AppStreamAverageCapacityUtilization = 'AppStreamAverageCapacityUtilization'
    ComprehendInferenceUtilization = 'ComprehendInferenceUtilization'
    LambdaProvisionedConcurrencyUtilization = 'LambdaProvisionedConcurrencyUtilization'
    CassandraReadCapacityUtilization = 'CassandraReadCapacityUtilization'
    CassandraWriteCapacityUtilization = 'CassandraWriteCapacityUtilization'
    KafkaBrokerStorageUtilization = 'KafkaBrokerStorageUtilization'
    ElastiCachePrimaryEngineCPUUtilization = 'ElastiCachePrimaryEngineCPUUtilization'
    ElastiCacheReplicaEngineCPUUtilization = 'ElastiCacheReplicaEngineCPUUtilization'
    ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage = (
        'ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage'
    )
    NeptuneReaderAverageCPUUtilization = 'NeptuneReaderAverageCPUUtilization'


class MetricUnit(RootModel[str]):
    root: str


class MinAdjustmentMagnitude(RootModel[int]):
    root: int


class ObjectNotFoundException(RootModel[Any]):
    root: Any


class PolicyName(
    RootModel[constr(pattern=r'\p{Print}+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'\p{Print}+', min_length=1, max_length=256)


class PolicyType(Enum):
    StepScaling = 'StepScaling'
    TargetTrackingScaling = 'TargetTrackingScaling'


class PutScheduledActionResponse(BaseModel):
    pass


class ResourceCapacity(RootModel[int]):
    root: int


class ResourceId(RootModel[str]):
    root: str


class ResourceIdMaxLen1600(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class ResourceIdsMaxLen1600(RootModel[List[ResourceIdMaxLen1600]]):
    root: List[ResourceIdMaxLen1600] = Field(..., max_length=50)


class ResourceLabel(RootModel[constr(min_length=1, max_length=1023)]):
    root: constr(min_length=1, max_length=1023)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ReturnData(RootModel[bool]):
    root: bool


class ScalableDimension(Enum):
    ecs_service_DesiredCount = 'ecs:service:DesiredCount'
    ec2_spot_fleet_request_TargetCapacity = 'ec2:spot-fleet-request:TargetCapacity'
    elasticmapreduce_instancegroup_InstanceCount = (
        'elasticmapreduce:instancegroup:InstanceCount'
    )
    appstream_fleet_DesiredCapacity = 'appstream:fleet:DesiredCapacity'
    dynamodb_table_ReadCapacityUnits = 'dynamodb:table:ReadCapacityUnits'
    dynamodb_table_WriteCapacityUnits = 'dynamodb:table:WriteCapacityUnits'
    dynamodb_index_ReadCapacityUnits = 'dynamodb:index:ReadCapacityUnits'
    dynamodb_index_WriteCapacityUnits = 'dynamodb:index:WriteCapacityUnits'
    rds_cluster_ReadReplicaCount = 'rds:cluster:ReadReplicaCount'
    sagemaker_variant_DesiredInstanceCount = 'sagemaker:variant:DesiredInstanceCount'
    custom_resource_ResourceType_Property = 'custom-resource:ResourceType:Property'
    comprehend_document_classifier_endpoint_DesiredInferenceUnits = (
        'comprehend:document-classifier-endpoint:DesiredInferenceUnits'
    )
    comprehend_entity_recognizer_endpoint_DesiredInferenceUnits = (
        'comprehend:entity-recognizer-endpoint:DesiredInferenceUnits'
    )
    lambda_function_ProvisionedConcurrency = 'lambda:function:ProvisionedConcurrency'
    cassandra_table_ReadCapacityUnits = 'cassandra:table:ReadCapacityUnits'
    cassandra_table_WriteCapacityUnits = 'cassandra:table:WriteCapacityUnits'
    kafka_broker_storage_VolumeSize = 'kafka:broker-storage:VolumeSize'
    elasticache_replication_group_NodeGroups = (
        'elasticache:replication-group:NodeGroups'
    )
    elasticache_replication_group_Replicas = 'elasticache:replication-group:Replicas'
    neptune_cluster_ReadReplicaCount = 'neptune:cluster:ReadReplicaCount'


class ScalableTargetAction(BaseModel):
    MaxCapacity: Optional[ResourceCapacity] = None
    MinCapacity: Optional[ResourceCapacity] = None


class ScalingActivityStatusCode(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Successful = 'Successful'
    Overridden = 'Overridden'
    Unfulfilled = 'Unfulfilled'
    Failed = 'Failed'


class ScalingAdjustment(RootModel[int]):
    root: int


class ScalingSuspended(RootModel[bool]):
    root: bool


class ScheduledActionName(
    RootModel[
        constr(
            pattern=r'(?!((^[ ]+.*)|(.*([\u0000-\u001f]|[\u007f-\u009f]|[:/|])+.*)|(.*[ ]+$))).+',
            min_length=1,
            max_length=256,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'(?!((^[ ]+.*)|(.*([\u0000-\u001f]|[\u007f-\u009f]|[:/|])+.*)|(.*[ ]+$))).+',
        min_length=1,
        max_length=256,
    )


class ServiceNamespace(Enum):
    ecs = 'ecs'
    elasticmapreduce = 'elasticmapreduce'
    ec2 = 'ec2'
    appstream = 'appstream'
    dynamodb = 'dynamodb'
    rds = 'rds'
    sagemaker = 'sagemaker'
    custom_resource = 'custom-resource'
    comprehend = 'comprehend'
    lambda_ = 'lambda'
    cassandra = 'cassandra'
    kafka = 'kafka'
    elasticache = 'elasticache'
    neptune = 'neptune'


class StepAdjustment(BaseModel):
    MetricIntervalLowerBound: Optional[MetricScale] = None
    MetricIntervalUpperBound: Optional[MetricScale] = None
    ScalingAdjustment_1: ScalingAdjustment = Field(..., alias='ScalingAdjustment')


class StepAdjustments(RootModel[List[StepAdjustment]]):
    root: List[StepAdjustment]


class StepScalingPolicyConfiguration(BaseModel):
    AdjustmentType_1: Optional[AdjustmentType] = Field(None, alias='AdjustmentType')
    Cooldown_1: Optional[Cooldown] = Field(None, alias='Cooldown')
    MetricAggregationType_1: Optional[MetricAggregationType] = Field(
        None, alias='MetricAggregationType'
    )
    MinAdjustmentMagnitude_1: Optional[MinAdjustmentMagnitude] = Field(
        None, alias='MinAdjustmentMagnitude'
    )
    StepAdjustments_1: Optional[StepAdjustments] = Field(None, alias='StepAdjustments')


class SuspendedState(BaseModel):
    DynamicScalingInSuspended: Optional[ScalingSuspended] = None
    DynamicScalingOutSuspended: Optional[ScalingSuspended] = None
    ScheduledScalingSuspended: Optional[ScalingSuspended] = None


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TargetTrackingMetricDimensionName(
    RootModel[constr(min_length=1, max_length=255)]
):
    root: constr(min_length=1, max_length=255)


class TargetTrackingMetricDimensionValue(
    RootModel[constr(min_length=1, max_length=1024)]
):
    root: constr(min_length=1, max_length=1024)


class TargetTrackingMetricName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class TargetTrackingMetricNamespace(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class TargetTrackingMetricUnit(RootModel[constr(min_length=1, max_length=1023)]):
    root: constr(min_length=1, max_length=1023)


class TimestampType(RootModel[datetime]):
    root: datetime


class TooManyTagsException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class ValidationException(RootModel[Any]):
    root: Any


class XmlString(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    AnyScaleFrontendService_DeleteScalingPolicy = (
        'AnyScaleFrontendService.DeleteScalingPolicy'
    )


class XAmzTarget1(Enum):
    AnyScaleFrontendService_DeleteScheduledAction = (
        'AnyScaleFrontendService.DeleteScheduledAction'
    )


class XAmzTarget2(Enum):
    AnyScaleFrontendService_DeregisterScalableTarget = (
        'AnyScaleFrontendService.DeregisterScalableTarget'
    )


class XAmzTarget3(Enum):
    AnyScaleFrontendService_DescribeScalableTargets = (
        'AnyScaleFrontendService.DescribeScalableTargets'
    )


class XAmzTarget4(Enum):
    AnyScaleFrontendService_DescribeScalingActivities = (
        'AnyScaleFrontendService.DescribeScalingActivities'
    )


class XAmzTarget5(Enum):
    AnyScaleFrontendService_DescribeScalingPolicies = (
        'AnyScaleFrontendService.DescribeScalingPolicies'
    )


class XAmzTarget6(Enum):
    AnyScaleFrontendService_DescribeScheduledActions = (
        'AnyScaleFrontendService.DescribeScheduledActions'
    )


class XAmzTarget7(Enum):
    AnyScaleFrontendService_ListTagsForResource = (
        'AnyScaleFrontendService.ListTagsForResource'
    )


class XAmzTarget8(Enum):
    AnyScaleFrontendService_PutScalingPolicy = (
        'AnyScaleFrontendService.PutScalingPolicy'
    )


class XAmzTarget9(Enum):
    AnyScaleFrontendService_PutScheduledAction = (
        'AnyScaleFrontendService.PutScheduledAction'
    )


class XAmzTarget10(Enum):
    AnyScaleFrontendService_RegisterScalableTarget = (
        'AnyScaleFrontendService.RegisterScalableTarget'
    )


class XAmzTarget11(Enum):
    AnyScaleFrontendService_TagResource = 'AnyScaleFrontendService.TagResource'


class XAmzTarget12(Enum):
    AnyScaleFrontendService_UntagResource = 'AnyScaleFrontendService.UntagResource'


class Alarm(BaseModel):
    AlarmARN: ResourceId
    AlarmName: ResourceId


class Alarms(RootModel[List[Alarm]]):
    root: List[Alarm]


class DeleteScalingPolicyRequest(BaseModel):
    PolicyName: ResourceIdMaxLen1600
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')


class DeleteScheduledActionRequest(BaseModel):
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ScheduledActionName: ResourceIdMaxLen1600
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')


class DeregisterScalableTargetRequest(BaseModel):
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')


class DescribeScalableTargetsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[XmlString] = None
    ResourceIds: Optional[ResourceIdsMaxLen1600] = None
    ScalableDimension_1: Optional[ScalableDimension] = Field(
        None, alias='ScalableDimension'
    )
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')


class DescribeScalingActivitiesRequest(BaseModel):
    IncludeNotScaledActivities_1: Optional[IncludeNotScaledActivities] = Field(
        None, alias='IncludeNotScaledActivities'
    )
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[XmlString] = None
    ResourceId: Optional[ResourceIdMaxLen1600] = None
    ScalableDimension_1: Optional[ScalableDimension] = Field(
        None, alias='ScalableDimension'
    )
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')


class DescribeScalingPoliciesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[XmlString] = None
    PolicyNames: Optional[ResourceIdsMaxLen1600] = None
    ResourceId: Optional[ResourceIdMaxLen1600] = None
    ScalableDimension_1: Optional[ScalableDimension] = Field(
        None, alias='ScalableDimension'
    )
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')


class DescribeScheduledActionsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[XmlString] = None
    ResourceId: Optional[ResourceIdMaxLen1600] = None
    ScalableDimension_1: Optional[ScalableDimension] = Field(
        None, alias='ScalableDimension'
    )
    ScheduledActionNames: Optional[ResourceIdsMaxLen1600] = None
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')


class MetricDimension(BaseModel):
    Name: MetricDimensionName
    Value: MetricDimensionValue


class MetricDimensions(RootModel[List[MetricDimension]]):
    root: List[MetricDimension]


class NotScaledReason(BaseModel):
    Code: XmlString
    CurrentCapacity: Optional[ResourceCapacity] = None
    MaxCapacity: Optional[ResourceCapacity] = None
    MinCapacity: Optional[ResourceCapacity] = None


class NotScaledReasons(RootModel[List[NotScaledReason]]):
    root: List[NotScaledReason]


class PredefinedMetricSpecification(BaseModel):
    PredefinedMetricType: MetricType
    ResourceLabel_1: Optional[ResourceLabel] = Field(None, alias='ResourceLabel')


class PutScalingPolicyResponse(BaseModel):
    Alarms_1: Optional[Alarms] = Field(None, alias='Alarms')
    PolicyARN: ResourceIdMaxLen1600


class PutScheduledActionRequest(BaseModel):
    EndTime: Optional[TimestampType] = None
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ScalableTargetAction_1: Optional[ScalableTargetAction] = Field(
        None, alias='ScalableTargetAction'
    )
    Schedule: Optional[ResourceIdMaxLen1600] = None
    ScheduledActionName_1: ScheduledActionName = Field(..., alias='ScheduledActionName')
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')
    StartTime: Optional[TimestampType] = None
    Timezone: Optional[ResourceIdMaxLen1600] = None


class RegisterScalableTargetResponse(BaseModel):
    ScalableTargetARN: Optional[XmlString] = None


class ScalableTarget(BaseModel):
    CreationTime: TimestampType
    MaxCapacity: ResourceCapacity
    MinCapacity: ResourceCapacity
    ResourceId: ResourceIdMaxLen1600
    RoleARN: ResourceIdMaxLen1600
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ScalableTargetARN: Optional[XmlString] = None
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')
    SuspendedState_1: Optional[SuspendedState] = Field(None, alias='SuspendedState')


class ScalableTargets(RootModel[List[ScalableTarget]]):
    root: List[ScalableTarget]


class ScalingActivity(BaseModel):
    ActivityId: ResourceId
    Cause: XmlString
    Description: XmlString
    Details: Optional[XmlString] = None
    EndTime: Optional[TimestampType] = None
    NotScaledReasons_1: Optional[NotScaledReasons] = Field(
        None, alias='NotScaledReasons'
    )
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')
    StartTime: TimestampType
    StatusCode: ScalingActivityStatusCode
    StatusMessage: Optional[XmlString] = None


class ScheduledAction(BaseModel):
    CreationTime: TimestampType
    EndTime: Optional[TimestampType] = None
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension_1: Optional[ScalableDimension] = Field(
        None, alias='ScalableDimension'
    )
    ScalableTargetAction_1: Optional[ScalableTargetAction] = Field(
        None, alias='ScalableTargetAction'
    )
    Schedule: ResourceIdMaxLen1600
    ScheduledActionARN: ResourceIdMaxLen1600
    ScheduledActionName_1: ScheduledActionName = Field(..., alias='ScheduledActionName')
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')
    StartTime: Optional[TimestampType] = None
    Timezone: Optional[ResourceIdMaxLen1600] = None


class ScheduledActions(RootModel[List[ScheduledAction]]):
    root: List[ScheduledAction]


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagMap


class TargetTrackingMetricDimension(BaseModel):
    Name: TargetTrackingMetricDimensionName
    Value: TargetTrackingMetricDimensionValue


class TargetTrackingMetricDimensions(RootModel[List[TargetTrackingMetricDimension]]):
    root: List[TargetTrackingMetricDimension]


class DescribeScalableTargetsResponse(BaseModel):
    NextToken: Optional[XmlString] = None
    ScalableTargets_1: Optional[ScalableTargets] = Field(None, alias='ScalableTargets')


class DescribeScheduledActionsResponse(BaseModel):
    NextToken: Optional[XmlString] = None
    ScheduledActions_1: Optional[ScheduledActions] = Field(
        None, alias='ScheduledActions'
    )


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class RegisterScalableTargetRequest(BaseModel):
    MaxCapacity: Optional[ResourceCapacity] = None
    MinCapacity: Optional[ResourceCapacity] = None
    ResourceId: ResourceIdMaxLen1600
    RoleARN: Optional[ResourceIdMaxLen1600] = None
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')
    SuspendedState_1: Optional[SuspendedState] = Field(None, alias='SuspendedState')
    Tags: Optional[TagMap] = None


class ScalingActivities(RootModel[List[ScalingActivity]]):
    root: List[ScalingActivity]


class TargetTrackingMetric(BaseModel):
    Dimensions: Optional[TargetTrackingMetricDimensions] = None
    MetricName: Optional[TargetTrackingMetricName] = None
    Namespace: Optional[TargetTrackingMetricNamespace] = None


class TargetTrackingMetricStat(BaseModel):
    Metric: TargetTrackingMetric
    Stat: XmlString
    Unit: Optional[TargetTrackingMetricUnit] = None


class DescribeScalingActivitiesResponse(BaseModel):
    NextToken: Optional[XmlString] = None
    ScalingActivities_1: Optional[ScalingActivities] = Field(
        None, alias='ScalingActivities'
    )


class TargetTrackingMetricDataQuery(BaseModel):
    Expression_1: Optional[Expression] = Field(None, alias='Expression')
    Id_1: Id = Field(..., alias='Id')
    Label: Optional[XmlString] = None
    MetricStat: Optional[TargetTrackingMetricStat] = None
    ReturnData_1: Optional[ReturnData] = Field(None, alias='ReturnData')


class TargetTrackingMetricDataQueries(RootModel[List[TargetTrackingMetricDataQuery]]):
    root: List[TargetTrackingMetricDataQuery]


class CustomizedMetricSpecification(BaseModel):
    Dimensions: Optional[MetricDimensions] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Metrics: Optional[TargetTrackingMetricDataQueries] = None
    Namespace: Optional[MetricNamespace] = None
    Statistic: Optional[MetricStatistic] = None
    Unit: Optional[MetricUnit] = None


class TargetTrackingScalingPolicyConfiguration(BaseModel):
    CustomizedMetricSpecification_1: Optional[CustomizedMetricSpecification] = Field(
        None, alias='CustomizedMetricSpecification'
    )
    DisableScaleIn_1: Optional[DisableScaleIn] = Field(None, alias='DisableScaleIn')
    PredefinedMetricSpecification_1: Optional[PredefinedMetricSpecification] = Field(
        None, alias='PredefinedMetricSpecification'
    )
    ScaleInCooldown: Optional[Cooldown] = None
    ScaleOutCooldown: Optional[Cooldown] = None
    TargetValue: MetricScale


class PutScalingPolicyRequest(BaseModel):
    PolicyName_1: PolicyName = Field(..., alias='PolicyName')
    PolicyType_1: Optional[PolicyType] = Field(None, alias='PolicyType')
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')
    StepScalingPolicyConfiguration_1: Optional[StepScalingPolicyConfiguration] = Field(
        None, alias='StepScalingPolicyConfiguration'
    )
    TargetTrackingScalingPolicyConfiguration_1: Optional[
        TargetTrackingScalingPolicyConfiguration
    ] = Field(None, alias='TargetTrackingScalingPolicyConfiguration')


class ScalingPolicy(BaseModel):
    Alarms_1: Optional[Alarms] = Field(None, alias='Alarms')
    CreationTime: TimestampType
    PolicyARN: ResourceIdMaxLen1600
    PolicyName_1: PolicyName = Field(..., alias='PolicyName')
    PolicyType_1: PolicyType = Field(..., alias='PolicyType')
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension_1: ScalableDimension = Field(..., alias='ScalableDimension')
    ServiceNamespace_1: ServiceNamespace = Field(..., alias='ServiceNamespace')
    StepScalingPolicyConfiguration_1: Optional[StepScalingPolicyConfiguration] = Field(
        None, alias='StepScalingPolicyConfiguration'
    )
    TargetTrackingScalingPolicyConfiguration_1: Optional[
        TargetTrackingScalingPolicyConfiguration
    ] = Field(None, alias='TargetTrackingScalingPolicyConfiguration')


class ScalingPolicies(RootModel[List[ScalingPolicy]]):
    root: List[ScalingPolicy]


class DescribeScalingPoliciesResponse(BaseModel):
    NextToken: Optional[XmlString] = None
    ScalingPolicies_1: Optional[ScalingPolicies] = Field(None, alias='ScalingPolicies')
